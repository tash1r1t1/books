{"version":3,"sources":["script.js"],"names":["express","require","path","books","app","use","__dirname","urlencoded","extended","join","res","sendFile","req","get","post","console","log","body","redirect","title","_req$body","newBook","author","description","year","id","now","push","filter","book","parseInt","_req$body2","map","json","PORT"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,IAAOA,UAGTG,MAAQ,GAEZC,IAAIC,IAAIL,QAAO,OAAQM,YAGvBF,IAAIC,IAAIL,QAAQO,WAAW,CAAEC,UAAU,KAAvCJ,IAAIC,IAAIL,IAAAA,SAAAA,EAAQO,GAAaC,EAAAA,SAAUN,KAAAO,KAAAH,UAAA,iBAInCI,IAAAA,IAAIC,SAAST,SAAIU,EAAJF,GAGjBA,EAAAC,SAAAT,KAAAO,KAAAH,UAAA,iBAGCF,IAEDS,IAAA,SAAA,SAAAD,EAAAF,GAEIA,EAAIC,SAAST,KAAKO,KAAKH,UAAW,iBAItCF,IAAIS,IAAI,YAAa,SAACD,EAAKF,GAAvBG,EAAIF,SAAAT,KAAaO,KAAAH,UAAMI,oBAK3BN,IAAIU,KAAK,YAAa,SAAAF,EAAAF,GAElBK,QAAQC,IAAI,aAAcJ,EAAIK,MAE9BP,EAAIQ,SAAS,YAIbd,IAAAU,KAAA,SAAA,SAAAF,EAAAF,GACAK,QAAQC,IAAI,mBAAoBJ,EAAIK,MAFxCP,EAAAQ,SAAA,YAOiCd,IAAAU,KACrBK,SADqB,SAAAP,EACrBO,GADqB,IAAAC,EAAAR,EAAAK,KAIvBI,EAAU,CAAVA,MAJuBD,EAAAD,MAKzBA,OALyBC,EAAAE,OAMzBA,YANyBF,EACdE,YAMXC,KAPyBH,EAAAI,KAQrBC,GAAED,KAJME,OAShBvB,MAAMwB,KAAKN,GAGXX,EAAIQ,SAAS,YAIuBd,IAAAU,KAAA,gBAGpC,SAAAF,EAAAF,GAAA,IAFQe,EAAOb,EAAIK,KAAXQ,GAGRtB,MAEAA,MAAAyB,OAAA,SAAAC,GAAA,OAAAA,EAAAJ,KAAAK,SAAAL,KAIJf,EAAAQ,SAAA,YACwCd,IAAAU,KAAA,gBAAA,SAAAF,EAAAF,GAAA,IAAAqB,EAAAnB,EAAAK,KAAAQ,EAAAM,EAAAN,GAAAN,EAAAY,EAAAZ,MAAAG,EAAAS,EAAAT,OAAAC,EAAAQ,EAAAR,YAAAC,EAAAO,EAAAP,KAAArB,MAAAA,MAAA6B,IAAA,SAAAH,GAKhC,OAAIA,EAAKJ,KAAOK,SAASL,GADrB,CAAUA,GAAAA,EAAAN,MAAAA,EAAAU,OAAAA,EAAQN,YAAAA,EAAAC,KAAAA,GAEXK,IAAqBN,EAAAA,SAAAA,YAUxCnB,IAAIS,IAAI,eAAgB,SAACD,EAAKF,GARtBA,EAAAuB,KAAOJ,SAKd,IAEDK,KAAA,KACA9B,IAAIS,OAAIqB,KAAA,WACJxB,QAASP,IAATO,sCAAAA,OAAiBwB","file":"script.min.js","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\nlet books = [];\r\n// Middleware to serve static files from the current directory\r\napp.use(express.static(__dirname));\r\n\r\n// Middleware to parse URL-encoded data from forms\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Route for the home page\r\napp.get('/', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Route for the admin page\r\napp.get('/admin', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'admin.html'));\r\n});\r\n\r\n// Route for the login page\r\napp.get('/login', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'login.html'));\r\n});\r\n\r\n// Route for the registration page\r\napp.get('/register', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'register.html'));\r\n});\r\n\r\n// Route to handle the registration form submission\r\napp.post('/register', (req, res) => {\r\n    // Here you can process the form data, for example:\r\n    console.log('Form Data:', req.body);\r\n    // Redirect to the admin page after registration\r\n    res.redirect('/admin');\r\n});\r\n\r\napp.post('/login', (req, res) => {\r\n    // Here you can process the login data, for example:\r\n    console.log('Login Form Data:', req.body);\r\n    // Redirect to the admin page after login\r\n    res.redirect('/admin');\r\n});\r\n\r\napp.post('/admin', (req, res) => {\r\n    const { title, author, description, year } = req.body;\r\n\r\n    // Create a new book object\r\n    const newBook = {\r\n        title: title,\r\n        author: author,\r\n        description: description,\r\n        year: year,\r\n        id: Date.now() // Use timestamp as a unique ID\r\n    };\r\n\r\n    // Add the new book to the in-memory store\r\n    books.push(newBook);\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to handle deleting a book\r\napp.post('/admin/delete', (req, res) => {\r\n    const { id } = req.body;\r\n\r\n    // Remove the book with the given ID\r\n    books = books.filter(book => book.id !== parseInt(id));\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to handle updating a book\r\napp.post('/admin/update', (req, res) => {\r\n    const { id, title, author, description, year } = req.body;\r\n\r\n    // Update the book with the given ID\r\n    books = books.map(book => {\r\n        if (book.id === parseInt(id)) {\r\n            return { id, title, author, description, year };\r\n        }\r\n        return book;\r\n    });\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to get the list of books\r\napp.get('/admin/books', (req, res) => {\r\n    res.json(books); // Send the list of books as JSON\r\n});\r\n\r\n\r\nconst PORT = 8080;\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server listening: http://localhost:${PORT}`);\r\n});\r\n"]}