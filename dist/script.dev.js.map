{"version":3,"sources":["script.js"],"names":["express","require","path","app","books","use","__dirname","urlencoded","extended","get","req","res","sendFile","join","post","console","log","body","redirect","title","author","description","year","newBook","id","Date","now","push","filter","book","parseInt","map","json","PORT","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\nlet books = [];\r\n// Middleware to serve static files from the current directory\r\napp.use(express.static(__dirname));\r\n\r\n// Middleware to parse URL-encoded data from forms\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Route for the home page\r\napp.get('/', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Route for the admin page\r\napp.get('/admin', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'admin.html'));\r\n});\r\n\r\n// Route for the login page\r\napp.get('/login', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'login.html'));\r\n});\r\n\r\n// Route for the registration page\r\napp.get('/register', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'register.html'));\r\n});\r\n\r\n// Route to handle the registration form submission\r\napp.post('/register', (req, res) => {\r\n    // Here you can process the form data, for example:\r\n    console.log('Form Data:', req.body);\r\n    // Redirect to the admin page after registration\r\n    res.redirect('/admin');\r\n});\r\n\r\napp.post('/login', (req, res) => {\r\n    // Here you can process the login data, for example:\r\n    console.log('Login Form Data:', req.body);\r\n    // Redirect to the admin page after login\r\n    res.redirect('/admin');\r\n});\r\n\r\napp.post('/admin', (req, res) => {\r\n    const { title, author, description, year } = req.body;\r\n\r\n    // Create a new book object\r\n    const newBook = {\r\n        title: title,\r\n        author: author,\r\n        description: description,\r\n        year: year,\r\n        id: Date.now() // Use timestamp as a unique ID\r\n    };\r\n\r\n    // Add the new book to the in-memory store\r\n    books.push(newBook);\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to handle deleting a book\r\napp.post('/admin/delete', (req, res) => {\r\n    const { id } = req.body;\r\n\r\n    // Remove the book with the given ID\r\n    books = books.filter(book => book.id !== parseInt(id));\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to handle updating a book\r\napp.post('/admin/update', (req, res) => {\r\n    const { id, title, author, description, year } = req.body;\r\n\r\n    // Update the book with the given ID\r\n    books = books.map(book => {\r\n        if (book.id === parseInt(id)) {\r\n            return { id, title, author, description, year };\r\n        }\r\n        return book;\r\n    });\r\n\r\n    // Redirect back to the admin page\r\n    res.redirect('/admin');\r\n});\r\n\r\n// Route to get the list of books\r\napp.get('/admin/books', (req, res) => {\r\n    res.json(books); // Send the list of books as JSON\r\n});\r\n\r\n\r\nconst PORT = 8080;\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server listening: http://localhost:${PORT}`);\r\n});\r\n"],"file":"script.dev.js"}