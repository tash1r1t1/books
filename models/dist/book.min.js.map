{"version":3,"sources":["book.js"],"names":["sqlite3","require","verbose","db","Database","serialize","Book","Promise","resolve","reject","all","err","rows","title","author","year","description","coverUrl","run","this","lastID","id","row","_ref"],"mappings":"mZACA,IAAMA,QAAUC,QAAQ,WAAWC,UAG7BC,GAAK,IAAIH,QAAQI,SAAS,wBAGhCD,GAAGE,UAAU,WANPL,GAAAA,IAAAA,kVAmBAM,qHAGE,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAEzBN,GAAGO,IAAI,sBAAuB,GAAI,SAACC,EAAKC,GAChCD,GACAF,EAAOE,GAEXH,EAAQI,uCADPC,EAAAC,EAAAC,EAAAC,EAAAC,GAQT,OAAO,IAAIV,QAAQ,SAACC,EAASC,GAXzBN,GAAAe,IAFJ,wFAWJ,CAAAL,EAAAC,EAAAC,EAAAC,EAAAC,GAOY,SAAUN,GACFA,GACAF,EAAOE,GAPZJ,EAAQY,KAAAC,+CAgBLC,GAPFb,OAAAA,IAAQD,QAAKa,SAAAA,EAAUX,GATnCN,GAAAe,IAAA,iCAAA,CAAAG,GAAA,SAAAV,GAeJA,GAMgBF,EAAOE,GAEXH,yCAFWG,GACV,OAAA,IAAAJ,QAAA,SAAAC,EAAAC,GACDD,GAAAA,IAAO,mCAAK,CAAAa,GAAA,SAAAV,EAAAW,GAJhBX,EAFJF,EAAAE,GAmBYH,EAAQc,sCAHZD,KAAS,IAAAR,EAAAU,EAAAV,MAAAC,EAAAS,EAAAT,OAAAC,EAAAQ,EAAAR,KAAAC,EAAAO,EAAAP,YAAAC,EAAAM,EAAAN,SACLR,OAAAA,IAAOE,QAAO,SAAAH,EAAAC,GAEdD,GAAAA,IACH,+FALL,CAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAI,GAFJ,SAAAV,GAYJA,EASoBF,EAAOE,GAEPH,iBAPZL,OAAAA,QACIG","file":"book.min.js","sourcesContent":["// Імпортуємо модуль sqlite3 з можливістю використання розширених функцій\r\nconst sqlite3 = require('sqlite3').verbose();\r\n\r\n// Ініціалізуємо базу даних SQLite, вказуючи шлях до файлу бази даних\r\nconst db = new sqlite3.Database('./db/database.sqlite');\r\n\r\n// Виконуємо ініціалізацію бази даних\r\ndb.serialize(() => {\r\n    // Створюємо таблицю books, якщо вона не існує\r\n    db.run(`CREATE TABLE IF NOT EXISTS books (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        title TEXT,                            \r\n        author TEXT,                          \r\n        year INTEGER,                          \r\n        description TEXT,                     \r\n        coverUrl TEXT                       \r\n    )`);\r\n});\r\n\r\n// Клас Book, що представляє модель для роботи з таблицею books\r\nclass Book {\r\n    // Метод для отримання всіх книг з бази даних\r\n    static getAllBooks() {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для отримання всіх записів у таблиці books\r\n            db.all('SELECT * FROM books', [], (err, rows) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                }\r\n                resolve(rows);   // Передаємо результат запиту у випадку успіху\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для додавання нової книги до бази даних\r\n    static addBook(title, author, year, description, coverUrl) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для вставки нового запису в таблицю books\r\n            db.run(\r\n                'INSERT INTO books (title, author, year, description, coverUrl) VALUES (?, ?, ?, ?, ?)',\r\n                [title, author, year, description, coverUrl],  // Параметри запиту\r\n                function (err) {\r\n                    if (err) {\r\n                        reject(err);  // Відхиляємо проміс у випадку помилки\r\n                    }\r\n                    resolve(this.lastID);  // Повертаємо ID доданого запису\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    // Метод для видалення книги за її ID\r\n    static deleteBook(id) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для видалення запису з таблиці books за ID\r\n            db.run('DELETE FROM books WHERE id = ?', [id], (err) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                }\r\n                resolve();  // Повертаємо успішний результат\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для пошуку книги за ID\r\n    static findById(id) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для отримання книги за заданим ID\r\n            db.get('SELECT * FROM books WHERE id = ?', [id], (err, row) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                } else {\r\n                    resolve(row);  // Повертаємо знайдений запис\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для оновлення інформації про книгу за ID\r\n    static update(id, { title, author, year, description, coverUrl }) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для оновлення даних книги за заданим ID\r\n            db.run(\r\n                'UPDATE books SET title = ?, author = ?, year = ?, description = ?, coverUrl = ? WHERE id = ?',\r\n                [title, author, year, description, coverUrl, id],  // Параметри запиту\r\n                function (err) {\r\n                    if (err) {\r\n                        reject(err);  // Відхиляємо проміс у випадку помилки\r\n                    } else {\r\n                        resolve();  // Повертаємо успішний результат\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n// Експортуємо клас Book для використання в інших модулях\r\nmodule.exports = Book;\r\n"]}