{"version":3,"sources":["user.js"],"names":["bcrypt","require","sqlite3","verbose","db","Database","serialize","User","username","password","hash","hashedPassword","Promise","resolve","reject","run","err","this","lastID","get","row","user","compare","module","exports"],"mappings":"mZACA,IAAMA,OAASC,QAAQ,YAGjBC,QAAUD,QAAQ,WAAWE,UAG7BC,GAAK,IAAIF,QAAQG,SAAS,wBAGhCD,GAAGE,UAAU,WANPJ,GAAAA,IAAAA,+LAeNK,gHAG0BC,EAAUC,kIAECT,OAAOU,KAAKD,EAAU,mBAA7CE,2BACC,IAAIC,QAAQ,SAACC,EAASC,GAEzBV,GAAGW,IACC,uDACA,CAACP,EAAUG,GACX,SAAUK,GATtBA,GAWoBF,EAVEN,GAYNK,EAAQI,KAAKC,wFAODV,4GAjBlBG,IAAAA,QAAAA,SAkBcE,EAASC,GAhBzBV,GAAAe,IAAA,yCAAA,CAAAX,GAAA,SAAAQ,EAAAI,GACGL,GAGCD,EAAUE,GAEFF,EAAAA,qFAsBUO,EAAMZ,4GAEzBT,OAAOsB,QAAQb,EAAUY,EAAKZ,wDAK7Cc,OArBIC,QAAAjB","file":"user.min.js","sourcesContent":["// Імпортуємо bcryptjs для хешування паролів\r\nconst bcrypt = require('bcryptjs');\r\n\r\n// Імпортуємо sqlite3 з можливістю використання розширених функцій\r\nconst sqlite3 = require('sqlite3').verbose();\r\n\r\n// Ініціалізуємо базу даних SQLite, вказуючи шлях до файлу бази даних\r\nconst db = new sqlite3.Database('./db/database.sqlite');\r\n\r\n// Виконуємо ініціалізацію бази даних\r\ndb.serialize(() => {\r\n    // Створюємо таблицю users, якщо вона не існує\r\n    db.run(`CREATE TABLE IF NOT EXISTS users (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT, \r\n        username TEXT UNIQUE,                 \r\n        password TEXT                     \r\n    )`);\r\n});\r\n\r\n// Клас User для роботи з користувачами у базі даних\r\nclass User {\r\n    // Метод для реєстрації нового користувача\r\n    static async register(username, password) {\r\n        // Хешуємо пароль перед збереженням у базу даних\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для вставки нового користувача в таблицю users\r\n            db.run(\r\n                'INSERT INTO users (username, password) VALUES (?, ?)',\r\n                [username, hashedPassword],  // Вставляємо ім'я користувача та хеш пароля\r\n                function (err) {\r\n                    if (err) {\r\n                        reject(err);  // Відхиляємо проміс у випадку помилки\r\n                    }\r\n                    resolve(this.lastID);  // Повертаємо ID нового користувача\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    // Метод для пошуку користувача за його ім'ям\r\n    static async findByUsername(username) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для отримання користувача за заданим ім'ям\r\n            db.get('SELECT * FROM users WHERE username = ?', [username], (err, row) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                }\r\n                resolve(row);  // Повертаємо знайдений запис (користувача)\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для перевірки валідності пароля користувача\r\n    static async validatePassword(user, password) {\r\n        // Порівнюємо вказаний пароль з хешем пароля користувача з бази даних\r\n        return bcrypt.compare(password, user.password);\r\n    }\r\n}\r\n\r\n// Експортуємо клас User для використання в інших модулях\r\nmodule.exports = User;\r\n"]}