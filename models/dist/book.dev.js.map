{"version":3,"sources":["book.js"],"names":["sqlite3","require","verbose","db","Database","serialize","run","Book","Promise","resolve","reject","all","err","rows","title","author","year","description","coverUrl","lastID","id","get","row","module","exports"],"mappings":"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","sourcesContent":["// Імпортуємо модуль sqlite3 з можливістю використання розширених функцій\r\nconst sqlite3 = require('sqlite3').verbose();\r\n\r\n// Ініціалізуємо базу даних SQLite, вказуючи шлях до файлу бази даних\r\nconst db = new sqlite3.Database('./db/database.sqlite');\r\n\r\n// Виконуємо ініціалізацію бази даних\r\ndb.serialize(() => {\r\n    // Створюємо таблицю books, якщо вона не існує\r\n    db.run(`CREATE TABLE IF NOT EXISTS books (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        title TEXT,                            \r\n        author TEXT,                          \r\n        year INTEGER,                          \r\n        description TEXT,                     \r\n        coverUrl TEXT                       \r\n    )`);\r\n});\r\n\r\n// Клас Book, що представляє модель для роботи з таблицею books\r\nclass Book {\r\n    // Метод для отримання всіх книг з бази даних\r\n    static getAllBooks() {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для отримання всіх записів у таблиці books\r\n            db.all('SELECT * FROM books', [], (err, rows) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                }\r\n                resolve(rows);   // Передаємо результат запиту у випадку успіху\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для додавання нової книги до бази даних\r\n    static addBook(title, author, year, description, coverUrl) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для вставки нового запису в таблицю books\r\n            db.run(\r\n                'INSERT INTO books (title, author, year, description, coverUrl) VALUES (?, ?, ?, ?, ?)',\r\n                [title, author, year, description, coverUrl],  // Параметри запиту\r\n                function (err) {\r\n                    if (err) {\r\n                        reject(err);  // Відхиляємо проміс у випадку помилки\r\n                    }\r\n                    resolve(this.lastID);  // Повертаємо ID доданого запису\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    // Метод для видалення книги за її ID\r\n    static deleteBook(id) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для видалення запису з таблиці books за ID\r\n            db.run('DELETE FROM books WHERE id = ?', [id], (err) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                }\r\n                resolve();  // Повертаємо успішний результат\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для пошуку книги за ID\r\n    static findById(id) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для отримання книги за заданим ID\r\n            db.get('SELECT * FROM books WHERE id = ?', [id], (err, row) => {\r\n                if (err) {\r\n                    reject(err);  // Відхиляємо проміс у випадку помилки\r\n                } else {\r\n                    resolve(row);  // Повертаємо знайдений запис\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Метод для оновлення інформації про книгу за ID\r\n    static update(id, { title, author, year, description, coverUrl }) {\r\n        return new Promise((resolve, reject) => {\r\n            // Виконуємо SQL-запит для оновлення даних книги за заданим ID\r\n            db.run(\r\n                'UPDATE books SET title = ?, author = ?, year = ?, description = ?, coverUrl = ? WHERE id = ?',\r\n                [title, author, year, description, coverUrl, id],  // Параметри запиту\r\n                function (err) {\r\n                    if (err) {\r\n                        reject(err);  // Відхиляємо проміс у випадку помилки\r\n                    } else {\r\n                        resolve();  // Повертаємо успішний результат\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n// Експортуємо клас Book для використання в інших модулях\r\nmodule.exports = Book;\r\n"],"file":"book.dev.js"}